package net.etfbl.main;

import javafx.application.Platform;
import javafx.beans.property.SimpleStringProperty;
import javafx.collections.FXCollections;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import net.etfbl.users.BookFileHandler;
import net.etfbl.api.BookService;
import net.etfbl.model.*;
import net.etfbl.api.*;

import java.io.*;
import java.util.*;
import java.util.zip.*;
import javax.mail.*;
import javax.mail.internet.*;

public class OpenUserWindow {

    private final List<Book> books;
    private final BookService bookService = new BookService();

    public OpenUserWindow() {
        this.books = bookService.getBooks();
    }

    public void show() {
        Stage stage = new Stage();
        stage.setTitle("User Dashboard");

        TableView<Book> tableView = new TableView<>();

        // Defining columns
        TableColumn<Book, String> titleColumn = new TableColumn<>("Title");
        titleColumn.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getTitle()));

        TableColumn<Book, String> authorColumn = new TableColumn<>("Author");
        authorColumn.setCellValueFactory(data -> new SimpleStringProperty(data.getValue().getAuthor()));

        // Enable multiple selection in the table
        tableView.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);

        // Details button column
        TableColumn<Book, Void> detailsColumn = new TableColumn<>("Details");
        detailsColumn.setCellFactory(param -> new TableCell<>() {
            private final Button detailsButton = new Button("Details");

            {
                detailsButton.setOnAction(event -> {
                    Book book = getTableView().getItems().get(getIndex());
                    showDetailsPopup(book);
                });
            }

            @Override
            protected void updateItem(Void item, boolean empty) {
                super.updateItem(item, empty);
                if (empty) {
                    setGraphic(null);
                } else {
                    setGraphic(detailsButton);
                }
            }
        });

        // Adding columns to the table
        tableView.getColumns().addAll(titleColumn, authorColumn, detailsColumn);
        tableView.getItems().addAll(books);

        // Download button to pack selected books into a ZIP and send via email
        Button downloadButton = new Button("Download Selected Books");
        downloadButton.setOnAction(event -> {
            List<Book> selectedBooks = tableView.getSelectionModel().getSelectedItems();
            if (!selectedBooks.isEmpty()) {
                sendBooksByEmail(selectedBooks);
            } else {
                showError("No books selected!");
            }
        });

        // Adding refresh button
        Button refreshButton = new Button("Refresh");
        refreshButton.setOnAction(event -> refreshTable(tableView));

        VBox layout = new VBox(10, tableView, downloadButton, refreshButton);
        Scene scene = new Scene(layout, 800, 600);
        stage.setScene(scene);
        stage.show();
    }

    private void showDetailsPopup(Book book) {
        Stage detailsStage = new Stage();
        detailsStage.setTitle("Book Details");

        VBox layout = new VBox(10);
        layout.setPadding(new javafx.geometry.Insets(10));

        Label titleLabel = new Label("Title: " + book.getTitle());
        Label authorLabel = new Label("Author: " + book.getAuthor());
        TextArea previewText = new TextArea(book.getPreview()); // Assuming Book has a getPreview() method
        previewText.setEditable(false);

        layout.getChildren().addAll(titleLabel, authorLabel, previewText);
        Scene scene = new Scene(layout, 400, 300);
        detailsStage.setScene(scene);
        detailsStage.show();
    }

    private void refreshTable(TableView<Book> tableView) {
        List<Book> updatedBooks = BookFileHandler.loadBooks();
        Platform.runLater(() -> tableView.getItems().setAll(updatedBooks));
    }

    private void sendBooksByEmail(List<Book> selectedBooks) {
        try {
            // Create a temporary ZIP file
            File zipFile = createZipFile(selectedBooks);

            // Send the ZIP file via email
            String recipient = "user@example.com"; // Replace with the actual user's email
            String subject = "Books You Selected";
            String body = "Attached is a ZIP file with the books you selected.";
            EmailService emailService = new EmailService();
            boolean success = emailService.sendEmailWithAttachment(recipient, subject, body, zipFile);

            if (success) {
                showInfo("Books sent successfully.");
            } else {
                showError("Failed to send books.");
            }
        } catch (IOException e) {
            e.printStackTrace();
            showError("Error while creating the ZIP file.");
        }
    }

    private File createZipFile(List<Book> selectedBooks) throws IOException {
        File tempFile = File.createTempFile("books_", ".zip");
        try (ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(tempFile))) {
            for (Book book : selectedBooks) {
                ZipEntry entry = new ZipEntry(book.getTitle() + ".txt");
                zos.putNextEntry(entry);

                // Write the first 100 lines from the book's content to the ZIP file
                BufferedReader reader = new BufferedReader(new StringReader(book.getContent()));
                for (int i = 0; i < 100; i++) {
                    String line = reader.readLine();
                    if (line == null) break;
                    zos.write(line.getBytes());
                    zos.write("\n".getBytes());
                }
                zos.closeEntry();
            }
        }
        return tempFile;
    }

    private void showInfo(String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION, message, ButtonType.OK);
        alert.showAndWait();
    }

    private void showError(String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR, message, ButtonType.OK);
        alert.showAndWait();
    }
}
