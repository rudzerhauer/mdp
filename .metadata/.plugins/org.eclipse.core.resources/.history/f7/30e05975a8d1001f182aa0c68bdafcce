package net.etfbl.main;

import java.util.Random;
import javafx.geometry.Insets;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.VBox;
import net.etfbl.api.BookService;
import net.etfbl.api.StudentService;
import net.etfbl.model.*;
import net.etfbl.users.BookFileHandler;
import net.etfbl.users.ReservationFileHandler;
import net.etfbl.users.UserFileHandler;

public class LibraryApp {

    public Scene createMainScene() {
        // Main layout
        BorderPane root = new BorderPane();

        // MenuBar
        MenuBar menuBar = new MenuBar();

        // Menus
        Menu membersMenu = new Menu("Članovi");
        Menu booksMenu = new Menu("Knjige");
        Menu reservationsMenu = new Menu("Rezervacije");

        // Adding menus to MenuBar
        menuBar.getMenus().addAll(membersMenu, booksMenu, reservationsMenu);

        // Setting MenuBar at the top
        root.setTop(menuBar);

        // Main content area
        VBox content = new VBox(10);
        content.setPadding(new Insets(10));

        // Buttons for actions
        Button addUserButton = new Button("Dodaj Člana");
        Button addBookButton = new Button("Dodaj Knjigu");
        Button addReservationButton = new Button("Dodaj Rezervaciju");

        // Setting button actions
        addUserButton.setOnAction(e -> showAddUserForm(content));
        addBookButton.setOnAction(e -> showAddBookForm(content));
        addReservationButton.setOnAction(e -> showAddReservationForm(content));

        // Adding buttons to content
        content.getChildren().addAll(addUserButton, addBookButton, addReservationButton);

        // Adding actions to menus
        membersMenu.setOnAction(e -> showAddUserForm(content));
        booksMenu.setOnAction(e -> showAddBookForm(content));
        reservationsMenu.setOnAction(e -> showAddReservationForm(content));

        // Setting content in the center
        root.setCenter(content);

        // Main scene
        return new Scene(root, 800, 600);
    }
    private TextField createTextField(String promptText) {
        TextField textField = new TextField();
        textField.setPromptText(promptText);
        return textField;
    }

    private PasswordField createPasswordField(String promptText) {
        PasswordField passwordField = new PasswordField();
        passwordField.setPromptText(promptText);
        return passwordField;
    }
    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.INFORMATION);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }



    private void showAddUserForm(VBox content) {
        content.getChildren().clear();

        // Create form fields
        TextField firstNameField = createTextField("Ime");
        TextField lastNameField = createTextField("Prezime");
        TextField emailField = createTextField("E-mail");
        TextField usernameField = createTextField("Korisničko ime");
        PasswordField passwordField = createPasswordField("Lozinka");

        // Add User Button
        Button submitButton = new Button("Dodaj Člana");
        submitButton.setOnAction(e -> {
            String firstName = firstNameField.getText();
            String lastName = lastNameField.getText();
            String email = emailField.getText();
            String username = usernameField.getText();
            String password = passwordField.getText();

            if (firstName.isEmpty() || lastName.isEmpty() || email.isEmpty() || username.isEmpty() || password.isEmpty()) {
                showAlert("Greška", "Sva polja moraju biti popunjena.");
                return;
            }

            Member newUser = new Member(new Random().nextInt(100), firstName, lastName, email, username, password);
            boolean success = UserFileHandler.addUser(newUser);

            if (success) {
                showAlert("Uspjeh", "Član je uspješno dodan.");
            } else {
                showAlert("Greška", "Korisničko ime već postoji.");
            }
        });

        // Display form
        content.getChildren().add(createFormGrid(
                new String[]{"Ime:", "Prezime:", "E-mail:", "Korisničko ime:", "Lozinka:"},
                new Control[]{firstNameField, lastNameField, emailField, usernameField, passwordField, submitButton}
        ));
    }

    private void showAddBookForm(VBox content) {
        content.getChildren().clear();

        // Create form fields
        TextField titleField = createTextField("Naslov");
        TextField authorField = createTextField("Autor");
        TextField yearField = createTextField("Godina");
        CheckBox availableCheckBox = new CheckBox("Dostupno");

        // Add Book Button
        Button submitButton = new Button("Dodaj Knjigu");
        submitButton.setOnAction(e -> {
            try {
                String title = titleField.getText();
                String author = authorField.getText();
                int year = Integer.parseInt(yearField.getText());
                boolean available = availableCheckBox.isSelected();

                if (title.isEmpty() || author.isEmpty()) {
                    showAlert("Greška", "Naslov i autor su obavezni.");
                    return;
                }

                Book newBook = new Book(new Random().nextInt(100), title, author, year, available);
                boolean success = BookFileHandler.addBook(newBook);

                if (success) {
                    showAlert("Uspjeh", "Knjiga je uspješno dodana.");
                } else {
                    showAlert("Greška", "Neuspješno dodavanje knjige.");
                }
            } catch (NumberFormatException ex) {
                showAlert("Greška", "Godina mora biti broj.");
            }
        });

        // Display form
        content.getChildren().add(createFormGrid(
                new String[]{"Naslov:", "Autor:", "Godina:", "Dostupno:"},
                new Control[]{titleField, authorField, yearField, availableCheckBox, submitButton}
        ));
    }

    private void showAddReservationForm(VBox content) {
        content.getChildren().clear();

        // Create form fields
        TextField memberIdField = createTextField("ID Člana");
        TextField bookIdField = createTextField("ID Knjige");
        TextField dateField = createTextField("Datum");
        TextField statusField = createTextField("Status");

        // Add Reservation Button
        Button submitButton = new Button("Dodaj Rezervaciju");
        submitButton.setOnAction(e -> {
            try {
                int memberId = Integer.parseInt(memberIdField.getText());
                int bookId = Integer.parseInt(bookIdField.getText());
                String date = dateField.getText();
                String status = statusField.getText();

                StudentService ss = new StudentService();
                BookService bs = new BookService();
                Member member = ss.getById(memberId);
                Book book = bs.getById(bookId);

                if (member == null || book == null) {
                    showAlert("Greška", "Neispravan ID člana ili knjige.");
                    return;
                }

                Reservation newReservation = new Reservation(new Random().nextInt(100), member, book, date, status);
                boolean success = ReservationFileHandler.addReservation(newReservation);

                if (success) {
                    showAlert("Uspjeh", "Rezervacija je uspješno dodana.");
                } else {
                    showAlert("Greška", "Neuspješno dodavanje rezervacije.");
                }
            } catch (NumberFormatException ex) {
                showAlert("Greška", "ID člana i knjige moraju biti brojevi.");
            }
        });

        // Display form
        content.getChildren().add(createFormGrid(
                new String[]{"ID Člana:", "ID Knjige:", "Datum:", "Status:"},
                new Control[]{memberIdField, bookIdField, dateField, statusField, submitButton}
        ));
    
    }
    private GridPane createFormGrid(String[] labels, Control[] controls) {
        GridPane grid = new GridPane();
        grid.setVgap(10);
        grid.setHgap(10);

        for (int i = 0; i < labels.length; i++) {
            if (i < controls.length - 1) {
                grid.add(new Label(labels[i]), 0, i);
                grid.add(controls[i], 1, i);
            }
        }
    }
