package net.etfbl.api;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.zip.ZipEntry;
import java.util.zip.ZipOutputStream;

import net.etfbl.model.DataSource;
import net.etfbl.model.Book;

public class BookService {

    DataSource data = DataSource.getInstance();

    public ArrayList<Book> getBooks() {
        return data.books;
    }

    public Book getById(int id) {
        for (Book b : data.books) {
            if (b.getId() == id) {
                return b;
            }
        }
        return new Book();
    }

    public boolean add(Book book) {
        
        return data.books.add(book);
    }

    public boolean update(Book book, int id) {
        int index = data.books.indexOf(new Book(id));
        if (index >= 0) {
            data.books.set(index, book);
            return true;
        } else {
            return false;
        }
    }
    
    private void createZipArchive(List<Book> selectedBooks, String outputPath) throws IOException {
        try (ZipOutputStream zos = new ZipOutputStream(new FileOutputStream(outputPath))) {
            for (Book book : selectedBooks) {
                String bookFilePath = "path/to/book/files/" + book.getTitle() + ".txt"; // Adjust the path
                File bookFile = new File(bookFilePath);

                if (bookFile.exists()) {
                    zos.putNextEntry(new ZipEntry(book.getTitle() + ".txt"));

                    try (FileInputStream fis = new FileInputStream(bookFile)) {
                        byte[] buffer = new byte[1024];
                        int length;
                        while ((length = fis.read(buffer)) > 0) {
                            zos.write(buffer, 0, length);
                        }
                    }

                    zos.closeEntry();
                }
            }
        }
    }


    public boolean remove(int id) {
        int index = data.books.indexOf(new Book(id));
        if (index >= 0) {
            data.books.remove(index);
            return true;
        } else {
            return false;
        }
    }
}
